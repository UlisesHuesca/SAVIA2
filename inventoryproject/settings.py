"""
Django settings for inventoryproject project.

Generated by 'django-admin startproject' using Django 3.2.5.

For more information on this file, see
https://docs.djangoproject.com/en/3.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.2/ref/settings/
"""
from pathlib import Path
# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent
from dotenv import load_dotenv
import moneyed
import os
load_dotenv()

MXN = moneyed.add_currency(
    code='MXN',
    numeric='068',
    name='Peso mexicano',
    countries=('MEXICO', )
)
CURRENCIES =('USD','MXN')

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.getenv('SECRET_KEY')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = ['grupovordcab.cloud','www.grupovordcab.cloud','localhost', '127.0.0.1']


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'dashboard.apps.DashboardConfig',
    'solicitudes.apps.SolicitudesConfig',
    'requisiciones.apps.RequisicionesConfig',
    'compras.apps.ComprasConfig',
    'tesoreria.apps.TesoreriaConfig',
    'entradas.apps.EntradasConfig',
    'user.apps.UserConfig',
    'cobranza.apps.CobranzaConfig',
    'gastos.apps.GastosConfig',
    'viaticos.apps.ViaticosConfig',
    'activos.apps.ActivosConfig',
    'api.apps.ApiConfig',
    'proveedores_externos.apps.ProveedoresExternosConfig',
    



# Extensions - installed with pip3 / requirements.txt
    'django_extensions',
    'crispy_forms',
    'djmoney',
    'plotly',
    'widget_tweaks',
    'simple_history',
    'django.contrib.humanize',
    'phone_field',
    'crispy_bootstrap4',
    'rest_framework',
    'rest_framework.authtoken',
    'corsheaders',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.locale.LocaleMiddleware',
    #'django.contrib.staticfiles.middleware.StaticFilesMiddleware',
    'django.middleware.cache.UpdateCacheMiddleware',
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'simple_history.middleware.HistoryRequestMiddleware',
    'user.middleware.LogUserAccessMiddleware',
    'user.middleware.Handle404Middleware',
]

ROOT_URLCONF = 'inventoryproject.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [BASE_DIR / 'templates'],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
                'dashboard.context_processors.contadores_processor'
            ],
        },
    },
]

WSGI_APPLICATION = 'inventoryproject.wsgi.application'

CACHES = {
    'default': {
        'BACKEND': 'django.core.cache.backends.locmem.LocMemCache',
        'LOCATION': 'unique-snowflake',
    }
}

# Database
# https://docs.djangoproject.com/en/3.2/ref/settings/#databases

#DATABASES = {
#    'default': {
#        'ENGINE': 'django.db.backends.sqlite3',
#        'NAME': BASE_DIR / 'db.sqlite3',
#    }
#}

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.mysql',
        'NAME': os.getenv('DATABASE_NAME'),
	    'USER': os.getenv('DATABASE_USER'),
        'PASSWORD': os.getenv('DATABASE_PASSWORD'),
        'HOST': 'localhost',
        'PORT': '3306',
	}
}

#AUTH_USER_MODEL = 'user.CustomUser'
# Password validation
# https://docs.djangoproject.com/en/3.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    #{
    #    'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    #},
    {'NAME': 'user.validators.UppercaseValidator'},
    {'NAME': 'user.validators.LowercaseValidator'},
    {'NAME': 'user.validators.NumberValidator'},
    {'NAME': 'user.validators.SpecialCharacterValidator'},
]


LOGGING = {
    "version": 1,
    "disable_existing_loggers": False,
    "formatters": {
        "standard": {
            "format": "%(asctime)s - %(levelname)s - %(name)s: %(message)s"
        },
    },
    "handlers": {
        "file": {
            "level": "DEBUG",
            "class": "logging.FileHandler",
            "filename": "debug.log",
            "formatter": "standard",  # Aplicar el formatter 'standard'
        },
    },
    "loggers": {
        "django": {
            "handlers": ["file"],
            "level": "DEBUG",
            "propagate": True,
        },
    },
}

LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'handlers': {
        'file': {
            'level': 'INFO',
            'class': 'logging.FileHandler',
            'filename': 'middleware.log',
            'formatter': 'standard',
        },
    },
    'formatters': {
        'standard': {
            'format': '%(asctime)s - %(levelname)s - %(name)s: %(message)s',
        },
    },
    'loggers': {
        'user.middleware': {  # Asegúrate de usar el nombre del módulo del middleware
            'handlers': ['file'],
            'level': 'INFO',
            'propagate': False,
        },
    },
}


REST_FRAMEWORK = {
    # Use Django's standard `django.contrib.auth` permissions,
    # or allow read-only access for unauthenticated users.
    'DEFAULT_PERMISSION_CLASSES': [
        'rest_framework.permissions.DjangoModelPermissionsOrAnonReadOnly',
        'rest_framework.authentication.TokenAuthentication',
    ],
    'DEFAULT_RENDERER_CLASSES': [
        'rest_framework.renderers.JSONRenderer',
        'rest_framework.renderers.BrowsableAPIRenderer',
        'rest_framework_xml.renderers.XMLRenderer',
    ],
}
# Internationalization
# https://docs.djangoproject.com/en/3.2/topics/i18n/

LANGUAGE_CODE = 'es-MX'

TIME_ZONE = 'America/Mexico_City'
# Activando la internacionalización y localización
USE_I18N = True

USE_L10N = True

USE_TZ = True

# Configurando los idiomas soportados
LANGUAGES = [
    ('es-MX', 'Español (México)'),
    ('pt-br', 'Português'),
]
# Define la ruta donde estarán los archivos de traducción
LOCALE_PATHS = [
    os.path.join(BASE_DIR, 'locale'),
]


#Esta etiqueta es necesaria para agregar crispy
CRISPY_TEMPLATE_PACK = 'bootstrap4'

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.2/howto/static-files/

#Manejo de imagenes
STATIC_URL = '/static/'

STATICFILES_DIRS = [
    BASE_DIR / 'static'
    ]

STATIC_ROOT = (BASE_DIR/"assert/")

MEDIA_ROOT = '/home/savia/images'

MEDIA_URL = '/images/'


CORS_ALLOWED_ORIGINS = [
    'https://uliseshuesca.pythonanywhere.com',
]

#STATIC_ROOT = os.path.join(BASE_DIR, "static/")
#Esta etiqueta es para redigir cuando te logeas desde settings
#LOGIN_REDIRECT_URL ='dashboard-index'
#Se cambia el redirect inicial para que los usuarios se vean obligados a seleccionar un perfil
LOGIN_REDIRECT_URL ='select-profile'
AUTHENTICATION_BACKENDS = ['user.backends.EmailBackend']

# Default primary key field type
# https://docs.djangoproject.com/en/3.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'
DEFAULT_FROM_EMAIL ='savia@vordcab.com'
#DEFAULT_FROM_EMAIL = 'savia@grupovordcab.com.mx'


EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
#EMAIL_HOST = 'smtp.gmail.com'

#EMAIL_USE_TLS = True
#EMAIL_USE_SSL = False
EMAIL_HOST ='mail.vordcab.com' #'smtp.gmail.com' 
EMAIL_PORT ='26'#'465'
EMAIL_HOST_USER ='savia@vordcab.com'
EMAIL_HOST_PASSWORD = 'TgySq*/168*/'
#EMAIL_HOST_PASSWORD = '78UjYgAH-+/7857/*'
EMAIL_USE_TLS = True
#EMAIL_USE_SSL = True
#EMAIL_HOST = 'mail.vordcab.com'
#EMAIL_PORT = '26' #os.getenv('EMAIL_PORT')
#EMAIL_HOST_USER = 'savia@vordcab.com' #os.getenv('EMAIL_HOST_USER')
#EMAIL_HOST_PASSWORD = '78UjYgAH-+/7857/*' #os.getenv('EMAIL_HOST_PASSWORD')
#EMAIL_USE_TLS = True
#EMAIL_USE_SSL = False

USE_THOUSAND_SEPARATOR = True
CELERY_BROKER_URL = 'amqp://localhost'
CELERY_RESULT_BACKEND = 'rpc://'
#USE_X_FORWARDED_HOST = True
#SECURE_PROXY_SSL_HEADER = ('HTTP_X_FORWARDED_PROTO', 'https')

DATA_UPLOAD_MAX_MEMORY_SIZE = 10485760  # 10MB, ajusta el valor según lo que necesites
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")

LANGUAGE_SESSION_KEY = 'django_language'

# Utilizar el backend por defecto que almacena las sesiones en la base de datos
SESSION_ENGINE = 'django.contrib.sessions.backends.db'

# Nombre de la cookie de sesión
SESSION_COOKIE_NAME = 'sessionid'

# Duración de la cookie de sesión en segundos (2 semanas)
SESSION_COOKIE_AGE = 1209600  # 2 semanas

# Guardar la sesión en cada solicitud (asegura que se persista cualquier cambio)
SESSION_SAVE_EVERY_REQUEST = True

# Si quieres que la sesión expire al cerrar el navegador, cambia esto a True
SESSION_EXPIRE_AT_BROWSER_CLOSE = False

# Opcional: Cookies seguras (recomendado para producción con HTTPS)
SESSION_COOKIE_SECURE = False  # Cambia a True si usas HTTPS

